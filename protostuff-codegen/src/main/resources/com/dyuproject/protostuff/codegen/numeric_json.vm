// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!

package ${module.getOutputPackage()};

import java.io.IOException;

import org.codehaus.jackson.JsonFactory;
import org.codehaus.jackson.JsonGenerator;
import org.codehaus.jackson.JsonParser;
import org.codehaus.jackson.JsonToken;

import com.google.protobuf.MessageLite;
import com.google.protobuf.MessageLite.Builder;

import com.dyuproject.protostuff.json.ProtobufConvertor;
import com.dyuproject.protostuff.json.ProtobufJSON;

#foreach( $m in $models )
#set( $msg = $m.getModelMeta().getMessageClass().getSimpleName() )
import ${module.getFullClassname()}.${msg};
#end

#foreach( $i in $Util.getOptionAsList($module, "imports", ";") )
import static ${i}JSON.*;
#end

public final class ${outputClassname} extends ProtobufJSON
{

    public ${outputClassname}()
    {
        super();
    }

    public ${outputClassname}(JsonFactory factory)
    {
        super(factory);
    }

    @SuppressWarnings("unchecked")
    protected <T extends MessageLite, B extends Builder> ProtobufConvertor<T, B> getConvertor(Class<?> messageType)
    {
        #foreach( $m in $models )
        #set( $name = $m.getModelMeta().getMessageClass().getSimpleName() )

        if(messageType==${name}.class)
            return (ProtobufConvertor<T, B>)CONVERTOR_${name};
        #end

        return null;
    }

    #foreach( $m in $models )
    #set( $name = $m.getModelMeta().getMessageClass().getSimpleName() )

    static final ProtobufConvertor<${name},${name}.Builder> CONVERTOR_${name} = new ProtobufConvertor<${name},${name}.Builder>()
    {

        public final void generateTo(JsonGenerator generator, ${name} message) throws IOException
        {
            generator.writeStartObject();
            #foreach( $p in $m.getProperties() )
            #set( $pm = $p.getPropertyMeta() )
            #set( $pn = $pm.getName() )
            #set ( $n = $pm.getNumber() )
            #set( $ppn = $Util.toPascal($pn) )
            #set( $tc = $pm.getTypeClass() )
            #if( $pm.isRepeated() )
            #set( $ctc = $pm.getComponentTypeClass() )

            generator.writeFieldName("${n}");
            generator.writeStartArray();
            #if( ${ctc.isEnum()} )

            for (${name}.${ctc.getSimpleName()} t : message.get${ppn}List())
                ${Util.printRGen($pm)}
            #elseif( ${ctc.getSimpleName()} == "ByteString" )

            for (com.google.protobuf.ByteString t : message.get${ppn}List())
                ${Util.printRGen($pm)}
            #else

            for (${ctc.getSimpleName()} t : message.get${ppn}List())
                ${Util.printRGen($pm)}
            #end

            generator.writeEndArray();
            #elseif( ${pm.isMessage()} )

            if (message.has${ppn}())
            {
                generator.writeFieldName("${n}");
                CONVERTOR_${tc.getSimpleName()}.generateTo(generator, message.get${ppn}());
            }
            #elseif( ${tc.getSimpleName()} == "ByteString" )

            if (message.has${ppn}())
            {
                generator.writeFieldName("${n}");
                generator.writeBinary(message.get${ppn}().toByteArray());
            }
            #elseif( ${tc.isEnum()} )

            if(message.has${ppn}())
                generator.writeNumberField("${n}", message.get${ppn}().getNumber());
            #elseif( ${tc.getSimpleName()} == "boolean" ) 

            if(message.has${ppn}())
                generator.writeBooleanField("${n}", message.get${ppn}());
            #elseif( ${tc.getSimpleName()} == "String" ) 

            if(message.has${ppn}())
                generator.writeStringField("${n}", message.get${ppn}());
            #else

            if(message.has${ppn}())
                generator.writeNumberField("${n}", message.get${ppn}());
            #end
            #end

            generator.writeEndObject();
        }

        public final ${name}.Builder parseFrom(JsonParser parser) throws IOException
        {
            ${name}.Builder builder = ${name}.newBuilder();
            mergeFrom(parser, builder);
            return builder;
        }

        public final void mergeFrom(JsonParser parser, ${name}.Builder builder) throws IOException
        {
            for(JsonToken t = parser.nextToken(); t!=JsonToken.END_OBJECT; t=parser.nextToken())
            {
                if(t!=JsonToken.FIELD_NAME)
                {
                    throw new IOException("Expected token: field_name but was " + 
                            parser.getCurrentToken() + " on message " + 
                            ${name}.class);
                }
                String name = parser.getCurrentName();
                switch( Integer.parseInt(name) )
                {
                    #foreach( $p in $m.getProperties() )
                    #set( $pm = $p.getPropertyMeta() )
                    #set( $pn = $pm.getName() )
                    #set( $ppn = $Util.toPascal($pn) )
                    #set( $tc = $pm.getTypeClass() )

                    case ${pm.getNumber()}:
                        #if( $pm.isRepeated() )
                        
                        if(parser.nextToken()!=JsonToken.START_ARRAY)
                        {
                            throw new IOException("Expected token: [ but was " + 
                                    parser.getCurrentToken() + " on message " + 
                                    ${name}.class);
                        }
                        for(JsonToken t1=parser.nextToken(); t1!=JsonToken.END_ARRAY; t1=parser.nextToken())
                        {
                            #set( $ctc = $pm.getComponentTypeClass() )
                            #if( $pm.isMessage() )

                            builder.add${ppn}(CONVERTOR_${ctc.getSimpleName()}.parseFrom(parser));
                            #elseif ( ${ctc.getSimpleName()} == "ByteString" )

                            builder.add${ppn}(com.google.protobuf.ByteString.copyFrom(parser.getBinaryValue()));
                            #elseif ( ${ctc.isEnum()} )

                            builder.add${ppn}(${name}.${ctc.getSimpleName()}.valueOf(parser.getIntValue()));
                            #elseif ( ${ctc.getSimpleName()} == "boolean" )

                            if(t1==JsonToken.VALUE_TRUE)
                                builder.add${ppn}(true);
                            else if(t1==JsonToken.VALUE_FALSE)
                                builder.add${ppn}(false);
                            else
                                throw new IOException("Expected token: true/false but was " + t1);
                            #elseif ( ${ctc.getSimpleName()} == "String" )

                            if(t1 != JsonToken.VALUE_STRING)
                                throw new IOException("Expected token: string but was " + t1);
                            builder.add${ppn}(parser.getText());
                            #else

                            builder.add${ppn}(${Util.printNumberParse($ctc)});
                            #end

                        }
                        #elseif( $pm.isMessage() )

                        parser.nextToken();
                        builder.set${ppn}(CONVERTOR_${tc.getSimpleName()}.parseFrom(parser));
                        #elseif( ${tc.getSimpleName()} == "ByteString" )

                        parser.nextToken();
                        builder.set${ppn}(com.google.protobuf.ByteString.copyFrom(parser.getBinaryValue()));
                        #elseif( ${tc.isEnum()} )

                        parser.nextToken();
                        builder.set${ppn}(${name}.${tc.getSimpleName()}.valueOf(parser.getIntValue()));
                        #elseif( ${tc.getSimpleName()} == "boolean" )

                        JsonToken jt = parser.nextToken();
                        if(jt==JsonToken.VALUE_TRUE)
                            builder.set${ppn}(true);
                        else if(jt==JsonToken.VALUE_FALSE)
                            builder.set${ppn}(false);
                        else
                            throw new IOException("Expected token: true/false but was " + jt);
                        #elseif( ${tc.getSimpleName()} == "String" )
                        
                        if(parser.nextToken() != JsonToken.VALUE_STRING)
                            throw new IOException("Expected token: string but was " + parser.getCurrentToken());
                        builder.set${ppn}(parser.getText());
                        #else

                        parser.nextToken();
                        builder.set${ppn}(${Util.printNumberParse($tc)});
                        #end

                        break;
                    #end

                    default:
                        throw new IOException("Field unknown: " + name + " on message " + ${name}.class);
                }
            }
        }

    };

    #end

}
