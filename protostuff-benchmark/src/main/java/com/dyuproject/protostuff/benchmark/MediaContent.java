// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from media.proto

package com.dyuproject.protostuff.benchmark;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.ArrayList;
import java.util.List;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;
import com.dyuproject.protostuff.UninitializedMessageException;

public final class MediaContent implements Externalizable, Message<MediaContent>
{

    public static Schema<MediaContent> getSchema()
    {
        return SCHEMA;
    }

    public static MediaContent getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final MediaContent DEFAULT_INSTANCE = new MediaContent();

    
    // non-private fields
    // see http://developer.android.com/guide/practices/design/performance.html#package_inner
    List<Image> image;
    Media media;

    public MediaContent()
    {
        
    }

    public MediaContent(
        Media media
    )
    {
        this.media = media;
    }

    // getters and setters

    // image

    public List<Image> getImageList()
    {
        return image;
    }

    public MediaContent setImageList(List<Image> image)
    {
        this.image = image;
        return this;
    }

    public Image getImage(int index)
    {
        return image == null ? null : image.get(index);
    }

    public int getImageCount()
    {
        return image == null ? 0 : image.size();
    }

    public MediaContent addImage(Image image)
    {
        if(this.image == null)
            this.image = new ArrayList<Image>();
        this.image.add(image);
        return this;
    }

    // media

    public Media getMedia()
    {
        return media;
    }

    public MediaContent setMedia(Media media)
    {
        this.media = media;
        return this;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, SCHEMA);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, SCHEMA);
    }

    // message method

    public Schema<MediaContent> cachedSchema()
    {
        return SCHEMA;
    }

    static final Schema<MediaContent> SCHEMA = new Schema<MediaContent>()
    {
        // schema methods

        public MediaContent newMessage()
        {
            return new MediaContent();
        }

        public Class<MediaContent> typeClass()
        {
            return MediaContent.class;
        }

        public String messageName()
        {
            return MediaContent.class.getSimpleName();
        }

        public String messageFullName()
        {
            return MediaContent.class.getName();
        }

        public boolean isInitialized(MediaContent message)
        {
            return 
                message.media != null;
        }

        public void mergeFrom(Input input, MediaContent message) throws IOException
        {
            for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
            {
                switch(number)
                {
                    case 0:
                        return;
                    case 1:
                        if(message.image == null)
                            message.image = new ArrayList<Image>();
                        message.image.add(input.mergeObject(null, Image.getSchema()));
                        break;

                    case 2:
                        message.media = input.mergeObject(message.media, Media.getSchema());
                        break;

                    default:
                        input.handleUnknownField(number, this);
                }   
            }
        }


        public void writeTo(Output output, MediaContent message) throws IOException
        {
            if(message.image != null)
            {
                for(Image image : message.image)
                {
                    if(image != null)
                        output.writeObject(1, image, Image.getSchema(), true);
                }
            }


            if(message.media == null)
                throw new UninitializedMessageException(message);
            output.writeObject(2, message.media, Media.getSchema(), false);

        }

        public String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "f1";
                case 2: return "f2";
                default: return null;
            }
        }

        public int getFieldNumber(String name)
        {
            final Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }

        final java.util.HashMap<String,Integer> fieldMap = new java.util.HashMap<String,Integer>();
        {
            fieldMap.put("f1", 1);
            fieldMap.put("f2", 2);
        }
    };
    
}
